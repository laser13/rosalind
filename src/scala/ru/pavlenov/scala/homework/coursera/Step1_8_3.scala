package ru.pavlenov.scala.homework.coursera

/**
 * ⓭ + 00
 * Какой сам? by Pavlenov Semen 19.10.14.
 * https://stepic.org/lesson/Some-Hidden-Messages-are-More-Elusive-than-Others-9/step/3?course=Bioinformatics-Algorithms&unit=407
 *
 * We say that position i in k-mers p1 … pk and q1 … qk is a mismatch if pi ≠ qi.
 * For example, CGAAT and CGGAC have two mismatches. The number of mismatches between strings p and q is called
 * the Hamming distance between these strings and is denoted HammingDistance(p, q).
 *
 * Hamming Distance Problem: Compute the Hamming distance between two strings.
 * Input: Two strings of equal length.
 * Output: The Hamming distance between these strings.
 *
 */
object Step1_8_3 {

  def start() = {

    val text1 = "CAAAACCATTAGTCCACTATATCGTAGGAAATTTGTAGTTTTTCAAGCCAGGATCACTACGCATAGGGGACTCCAAACCCCGCACCCCCCGCGAGGCCTGCCTACTGAATGGAGGTTAAGCGTTCAGTCAATTTTAATGCGCAAGATTTCCCTCTTTGTAAATACGCAGGATGCGGTCTAATAGTAGGAACGGGGTGAACACGTTCCAAGAGTGGGACCGAAGTTTGCGCCCCATCGATCCTAAGAGTATCAGTGGTTGCTCCAGGCACCCTGCTTACTTAATGTATTCATCTCTACCGCTTGAAATGACACTAATAGCCCTACGTTCTTTCTAAACATCTATTAAGGCCCGCCGACAGAGAGTCACTAGACTCTTCATGTGAACTGGTCAACTTAACGGTATGGCTACCCATTCGGGTGGACGGTGCGTCCGGAACTTACCGCTAGTGTGATAGGTCTGCTAGGAGTCTATATCTAGCCTTACATATTCCGGTATTTCTCAGGATTGGGTATGTGTTGTTCTACCCCTAACTTATAGGATCCAAGTCCACTATAGTTTAGTGGCCCCATGTGACCCTATTGACTCTATTAACTTACGCCGGTGTCTAATAGAACTCCTTATCCTACAGTTACCAATTTAGTATAATATCAACACCGATTGAAATCGCAGCTATTCGACTGGGTACGGAGAGGGCACCCTCGACCTTACATCAGTCTTGCTGGCCGGGAGATCACTGTCCCCCCTTGAGAATCACCTAAGGGGCGCTGCGGAGAGAATATCTCGCGGCGAGCCGTTGTTATGAATAGGCTTGGGCTGCCAGGGAGTTCAGGACAAATGGACCCTAGGAGTCAGAATAAAGTCTCAAGTGTCCCCCAGTACTCGAACCTCTCACATTGTACCGAGACGTTATTAGTCGAAGCTTCAAAGCGATTGTCATCTCACGAATTGCCAAAGCTAATGATCTTTATAATCCCTATCTTTTATGAAGCCAGCGCCTACCGAGCCCGCGCCACTGGGTTCGTTGGTTTGATAGGATTTA"
    val text2 = "GCGGGATTGTCATAGCTAGTCCAAATGTACCCGGACGGGACCTGGGAGCAGGTTGCACCCATGTCAGGTTCCTTCGCGAACGTATTGCCCAGCTCGTTAGCACTACAAGGACGGTAACATGGTTCGAATTATAGCCCAAGAGAGCCGACCTTTGTTCCGATCAGGGTACGTGTTGTACCTGGGTGAATCGGCAGCCGATGCGTCATGGCCGACATGGAGAATGGATTAAAAAGGGCTTCCGACAGGAAGCGTATAAGCCAATACTCGGCGCAAAGCCCACCTAAATGATTAGCTAGCCTCCGAGTTCTCTCGAGTATTCTAGGTCGCACGCAGTTATAATACGCTCTAGCTCGACAGGGATAGTCAAGGTGCTAAATCAGCGCGTACGCTCTGGTCTAAATGTTTGGGCGTCTATTTGCTGTGTCCGTAGTTTGGGAGAACCCCCTGTTCATTCCGAATGAAGAATGATAGGATGACATAACCATCACGCTCAACTACTCTTAATGGTCTGGAATATCACAATGACCATTATGATCATGGTATCACGGCGGACCAGTCTCAGTGGTCCAGTTTAGATTTCAGAAATTAGCCGTCCGACGGACCTTCAGGTGGTATTGTATAGGTGTCTCACCTTGAACGACTAGGAGCCTTCCAAAACACGGTACGATCGTTCTTTCTGTAAATCACTAGCCGTAAACAGTTACTGTCCCTTCCGAGCACGCCCCCGCATCTGCATATAAATACACGTATCCGCGAGTACTGCTGCCATGAACACCCTACGATAGTGGTATGACGCTCGACACCATGACCCGTTGCGTAGCGTGAGGGAAAGTTCGTTAGGTGAAACACGTGGCCGCGCAGTTCTAACTAGTATGCAATCTTCTAGAGCTATCCCGACAATACGAGGAAACTTTTCCCGGCCGGGTAGCGTGAGCATCCCCTCAACGCTGAGGGAGTATGGTTGGTTACGCGTTGAGTGCGTCACGTGAGCGTTATCCCGATGTAACTAATCTATAGGTCATCCTTAACCTTCAATTCGC"

    println(hammingDistance(text1, text2))

  }

  def hammingDistance(text1: String, text2: String) = {
    var cnt = 0
    for (i <- 0 until text1.length) {
      if (text1(i) != text2(i)) cnt += 1
    }
    cnt
  }

}
